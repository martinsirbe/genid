version: 2
project_name: genid
before:
  hooks:
    - go mod tidy
builds:
  - main: ./cmd/genid
    binary: genid
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
release:
  prerelease: auto
universal_binaries:
  - replace: true
brews:
  - name: genid
    description: "Generate Unique IDs"
    homepage: "https://github.com/martinsirbe/genid"
    repository:
      owner: martinsirbe
      name: homebrew-clinkclank
    commit_author:
      name: martinsirbe
      email: martins_irbe@mail.com
    caveats: |
      Thank you for installing the Unique ID Generator (genid)! Here are some tips to get started:

      ## Usage

      - Run `genid` from any terminal to generate unique identifiers instantly.
      - Specify the ID format using the `-type` flag (e.g. `-type uuid4`, `-type ulid`, etc.).
      - Generate multiple IDs at once using the `-n` flag.
      - For NanoID, you can customise the output length with the `-len` flag.

      ## Supported ID Types

      - `ulid`: Lexicographically sortable identifier
      - `uuid4`: Random UUID
      - `uuid5`: Name-based UUID (SHA-1)
      - `uuid6`: Reordered time-based UUID
      - `uuid7`: Unix epoch time-based UUID
      - `ksuid`: K-Sortable unique ID
      - `xid`: MongoDB-style unique ID
      - `nanoid`: Compact, URL-safe unique ID
      - `snowflake`: Twitter-style time-based ID

      ## Integration Ideas

      - **Shell Scripts**: Use `genid` to generate test IDs or stable primary keys during automation.
      - **Terminals**: Pipe output directly into tools like `jq`, `xargs`, or `pbcopy` for fast development workflows.
      - **Debugging & Prototyping**: Quickly generate realistic IDs in your backend services or data pipelines.

      To learn more about options, run `genid --help` or visit the GitHub repository:
      https://github.com/martinsirbe/genid

      Happy ID generating!
    test: |
      system "#{bin}/genid", "--help"
checksum:
  name_template: 'checksums.txt'
